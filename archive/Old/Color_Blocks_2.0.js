#target Illustrator-18////////////////////////////Color Blocks 2.0//////////////////////////////Updated 03 June, 2016	//fixed sewLine removal function to accomdate stroked sew lines that are compound path items.//Updated 06 September, 2016	//Fixed error handling in color block creation to avoid tons of prompt boxes for individual errors. 	//Script exits on the first instance of an error in loopArtboards function.function scriptContainer(){	if(app.documents.length>0){		//Define Global Variables//			var docRef = app.activeDocument;		var layers = docRef.layers;		var aB = docRef.artboards;		var swatches = docRef.swatches;		var inkList = docRef.inkList;		var valid = true;		var retry = false;			//Define Arrays//			var docInks = [];		var exterminate = [];			var wrongColorList = []; //swatches will be pushed here if they do not match the approved list		var approvedColors = [		'black b',		'white b',		'gray b',		'gray 2 b',		'steel b',		'navy b',		'navy 2 b',		'royal blue b',		'columbia b',		'teal b',		'dark green b',		'kelly green b',		'lime green b',		'optic yellow b',		'yellow b',		'athletic gold b',		'vegas gold b',		'orange b',		'texas orange b',		'red b',		'cardinal b',		'maroon b',		'hot pink b',		'pink b',		'soft pink b',		'purple b',		'flesh b',		'dark flesh b',		'brown b',		'cyan b',		'flo orange b',		'flo yellow b',		'flo pink b',		'twitch b',		'mint b',		'magenta b',		'neon coral b',		'flame b',		'bright purple b',		'dark charcoal b',		'info b',		'jock tag b',		'thru-cut',		'cut line',		'cutline',		'jrock charcoal',		'feeney purple b',		'feeney orange b',		'feeney orange body b',		'tailgater gold b',				];		var defaultSwatches = [		'White',		'Black',		'CMYK Red',		'CMYK Yellow',		'CMYK Green',		'CMYK Cyan',		'CMYK Blue',		'CMYK Magenta',		'C=15 M=100 Y=90 K=10',		'C=0 M=90 Y=85 K=0',		'C=0 M=80 Y=95 K=0',		'C=0 M=50 Y=100 K=0',		'C=0 M=35 Y=85 K=0',		'C=5 M=0 Y=90 K=0',		'C=20 M=0 Y=100 K=0',		'C=50 M=0 Y=100 K=0',		'C=75 M=0 Y=100 K=0',		'C=85 M=10 Y=100 K=10',		'C=90 M=30 Y=95 K=30',		'C=75 M=0 Y=75 K=0',		'C=80 M=10 Y=45 K=0',		'C=70 M=15 Y=0 K=0',		'C=85 M=50 Y=0 K=0',		'C=100 M=95 Y=5 K=0',		'C=100 M=100 Y=25 K=25',		'C=75 M=100 Y=0 K=0',		'C=50 M=100 Y=0 K=0',		'C=35 M=100 Y=35 K=10',		'C=10 M=100 Y=50 K=0',		'C=0 M=95 Y=20 K=0',		'C=25 M=25 Y=40 K=0',		'C=40 M=45 Y=50 K=5',		'C=50 M=50 Y=60 K=25',		'C=55 M=60 Y=65 K=40',		'C=25 M=40 Y=65 K=0',		'C=30 M=50 Y=75 K=10',		'C=35 M=60 Y=80 K=25',		'C=40 M=65 Y=90 K=35',		'C=40 M=70 Y=100 K=50',		'C=50 M=70 Y=80 K=70',		'White, Black',		'Orange, Yellow',		'Fading Sky',		'Super Soft Black Vignette',		'Foliage',		'Pompadour',		];		var nonPrintColors = [		'thru-cut',		'cut line',		'info b',		'jock tag b',		]				/////////////////////////////		////Begin Logic Container////		/////////////////////////////				function removeExistingBlockLayer(){			try{				layers["Color Blocks"].locked = false;				layers["Color Blocks"].remove();				inkList = docRef.inkList;			}			catch(e){}		}				function exterminateDefaultColors(){			var errorColors = [];			for (a=0; a<swatches.length; a++){				var curSwatch = swatches[a];				try{					if (curSwatch.name != '[Registration]' && curSwatch.name != '[None]'){						for(b=0; b< defaultSwatches.length; b++){							var dS = defaultSwatches[b];							if(curSwatch.name == dS){								exterminate.push(curSwatch);							}						}					}				}				catch(e){					errorColors.push(swatches[a]);				}			}			if (errorColors.length>0){				for(a=errorColors.length;a>-1;a--){					try{						var curSwatch = errorColors[a];						curSwatch.remove();					}					catch(e){						// alert("Couldn't delete one of the default swatches");					}				}							}						for (d=exterminate.length-1; d>-1; d--){				exterminate[d].remove();			}						try{				var grayGroup = docRef.swatchGroups.getByName('Grays');				grayGroup.remove();			}			catch(e){			}						try{				var brightsGroup = docRef.swatchGroups.getByName('Brights');				brightsGroup.remove();			}			catch(e){			}					}		function fixFloSwatches(){			for (a=0; a<swatches.length; a++){				try{					if (swatches[a].name == 'Bright Purple B'){					   var brightPurple = swatches.getByName("Bright Purple B");					   brightPurple.name = brightPurple.name.split('Bright Purple B').join('BRIGHT PURPLE B');					}					else if (swatches[a].name == 'Flame B'){						var flame = swatches.getByName("Flame B");						flame.name = flame.name.split('Flame B').join('FLAME B');					}					else if (swatches[a].name  == 'Flo Blue B'){						var floBlue = swatches.getByName("Flo Blue B");						floBlue.name = floBlue.name.split('Flo Blue B').join('FLO BLUE B');					}					else if (swatches[a].name == 'Flo Orange B'){						var floOrange = swatches.getByName("Flo Orange B");						floOrange.name = floOrange.name.split('Flo Orange B').join('FLO ORANGE B');					}					else if (swatches[a].name == 'Flo Pink B'){						var floPink = swatches.getByName("Flo Pink B");						floPink.name = floPink.name.split('Flo Pink B').join('FLO PINK B');					}					else if (swatches[a].name == 'Flo Yellow B'){						var floYellow = swatches.getByName("Flo Yellow B");						floYellow.name = floYellow.name.split('Flo Yellow B').join('FLO YELLOW B');					}					else if (swatches[a].name == 'Mint B'){						var mint = swatches.getByName("Mint B");						mint.name = mint.name.split('Mint B').join('MINT B');					}					else if (swatches[a].name == 'Neon Coral B'){						var neonCoral = swatches.getByName("Neon Coral B");						neonCoral.name = neonCoral.name.split('Neon Coral B').join('NEON CORAL B');					}					else if (swatches[a].name == 'cutline'){						var cutline = swatches.getByName('cutline');						cutline.name = cutline.name.split('cutline').join('CUT LINE');					}					else if (swatches[a].name == 'Cutline'){						var cutline = swatches.getByName('Cutline');						cutline.name = cutline.name.split('Cutline').join('CUT LINE');					}					else if (swatches[a].name == 'CutLine'){						var cutline = swatches.getByName('CutLine');						cutline.name = cutline.name.split('CutLine').join('CUT LINE');					}					else if (swatches[a].name == 'CUTLINE'){						var cutline = swatches.getByName('CUTLINE');						cutline.name = cutline.name.split('CUTLINE').join('CUT LINE');					}					else if (swatches[a].name == 'CUTline'){						var cutline = swatches.getByName('CUTline');						cutline.name = cutline.name.split('CUTline').join('CUT LINE');					}					else if (swatches[a].name == 'sewline'){						var sewLine = swatches.getByName('sewline');						sewLine.name = sewLine.name.split('sewline').join('SEW LINE');					}					else if (swatches[a].name == 'sew line'){						var sewLine = swatches.getByName('sew line');						sewLine.name = sewLine.name.split('sew line').join('SEW LINE');					}					else if (swatches[a].name == 'Sew Line'){						var sewLine = swatches.getByName('Sew Line');						sewLine.name = sewLine.name.split('Sew Line').join('SEW LINE');					}					else if (swatches[a].name == 'Sewline'){						var sewLine = swatches.getByName('Sewline');						sewLine.name = sewLine.name.split('Sewline').join('SEW LINE');					}					else if (swatches[a].name == 'Sew Lines'){						var sewLine = swatches.getByName('Sew Lines');						sewLine.name = sewLine.name.split('Sew Lines').join('SEW LINE');					}					else if(swatches[a].name == 'ZUND CUT'){						var zundCut = swatches[a];						zundCut.name = zundCut.name.split('ZUND CUT').join('Thru-cut');					}					else if(swatches[a].name == 'ZUNDCUT'){						var zundCut = swatches[a];						zundCut.name = zundCut.name.split('ZUNDCUT').join('Thru-cut');					}					else {					}				}				catch(e){					// alert("Swatch number " + a + " is throwing an error")					// valid = false;				}			}			inkList = docRef.inkList;		}				function removeSewLines(){			// alert("running sew line remove");			function innerRecursive(gatheredPaths, group){				for(var i=0; i<group.pageItems.length; i++){					var thisPageItem = group.pageItems[i];					if(thisPageItem.typename == 'PathItem' || thisPageItem.typename == 'CompoundPathItem'){						gatheredPaths.push(thisPageItem);			   					} else if(thisPageItem.typename == 'GroupItem'){										innerRecursive(gatheredPaths, thisPageItem);					} else if(thisPageItem.typename == 'TextFrame');				}			}			function outerRecursive(group){				var gatheredPaths = [];				innerRecursive(gatheredPaths, group);				 for(var i=0; i<gatheredPaths.length; i++){					var thisPath = gatheredPaths[i];					if(thisPath.typename == 'CompoundPathItem'){						if(thisPath.pathItems.length>0){							var thisCompoundPath = thisPath.pathItems[0];							if (thisCompoundPath.filled == true && thisCompoundPath.fillColor.spot && thisCompoundPath.fillColor.spot.name.toLowerCase() == 'sew line'){								sewLines.push(thisPath);							}							else if(thisCompoundPath.stroked == true && thisCompoundPath.strokeColor.spot.name.toLowerCase() == 'sew line')							{								sewLines.push(thisPath);							}						}					}								else if(thisPath.typename == 'PathItem'){						if(thisPath.filled && thisPath.fillColor.spot){							if (thisPath.fillColor.spot.name.toLowerCase() == 'sew line'){							sewLines.push(thisPath);							}						}						if(thisPath.stroked && thisPath.strokeColor.spot){							if (thisPath.strokeColor.spot.name.toLowerCase() == 'sew line'){							sewLines.push(thisPath);							}						}					}				}			}			if(app.documents.length > 0){				var docRef = app.activeDocument;				var layers = docRef.layers;				var groups = docRef.layers[0].groupItems.length;				var sewLines = [];											if(groups > 0){					for(var g=0; g<groups; g++){						var myGroup = docRef.layers[0].groupItems[g];						outerRecursive(myGroup);					}				}						for (a=sewLines.length-1;a>-1;a--){					sewLines[a].remove();				}				}			try{				swatches.getByName('SEW LINE').remove();			}			catch(e){			}			//verify sew lines are really gone			inkList = docRef.inkList;			for(var a=0;a<inkList.length;a++){				var curInk = inkList[a].name.toLowerCase();				if(curInk == 'sew line'){					retry = true;					break;				}							}					}				function alertProcessColors(){			var docProcessColors = [];			for(a=0;a<inkList.length;a++){				if (inkList[a] == '[Ink Process Cyan]' && inkList[a].inkInfo.printingStatus == InkPrintStatus.ENABLEINK){					docProcessColors.push("Cyan");				}				else if (inkList[a] == '[Ink Process Magenta]' && inkList[a].inkInfo.printingStatus == InkPrintStatus.ENABLEINK){					docProcessColors.push("Magenta");				}				else if (inkList[a] == '[Ink Process Yellow]' && inkList[a].inkInfo.printingStatus == InkPrintStatus.ENABLEINK){					docProcessColors.push("Yellow");				}				else if (inkList[a] == '[Ink Process Black]' && inkList[a].inkInfo.printingStatus == InkPrintStatus.ENABLEINK){					docProcessColors.push("Black");				}			}			if(docProcessColors.length > 0){				alert("You have the following process colors in your artwork" + ('\n') + docProcessColors.join('\n'));				valid = false;			}		}			function generateDocInks(){			inkList = docRef.inkList;			for(a=0;a<inkList.length;a++){				if (inkList[a].inkInfo.printingStatus == InkPrintStatus.ENABLEINK //				&& inkList[a] != '[Ink Process Cyan]' //				&& inkList[a] != '[Ink Process Magenta]'				&& inkList[a] != '[Ink Process Yellow]' //				&& inkList[a] != '[Ink Process Black]'){					var currentInk = '"' + inkList[a] + '"';					var holder = 0;					for(b=0;b<nonPrintColors.length;b++){						var substring = currentInk.substr(6,currentInk.length-8);						var nonPrint = nonPrintColors[b];						if (substring.toLowerCase() == nonPrint){							holder = 1;							break;						}					}					if(holder==0){						docInks.push(substring);					}				}			}		}			function generateWrongColorList(){			for(a=0;a<docInks.length;a++){				var currentInk = docInks[a];				var holder = 0				for(b=0;b<approvedColors.length;b++){					var compare = approvedColors[b];					if (currentInk.toLowerCase() == compare){						holder = 1;						break;					}					else {						holder = 0;					}				}				if (holder == 0){					wrongColorList.push(currentInk);				}			}			if(wrongColorList.length>0){				alert("The following colors do not belong in your file " + ('\n') + wrongColorList.join('\n'));			}		}				function navyGrayCheck(){			var navyAlert = false;			var grayAlert = false;						for(a=0;a<docInks.length;a++){				if(docInks[a] == "Gray B"){					for(b=0;b<docInks.length;b++){						if (docInks[b] == "Gray 2 B"){							grayAlert = true;							valid = false;						}					}				}				else if(docInks[a] == "Navy B"){					for(b=0;b<docInks.length;b++){						if(docInks[b] == "Navy 2 B"){							navyAlert = true;							valid = false;						}					}				}			}			if(navyAlert){				alert("Please merge 'Navy B' with 'Navy 2 B'.")			}			if(grayAlert){				alert("Please merge 'Gray B' with 'Gray 2 B'.")			}		}				function loopArtBoards(){			var valid = true;			try{				var blockLayer = layers.getByName("Color Blocks");				blockLayer.locked = false;				blockLayer.remove();				blockLayer = layers.add();				blockLayer.name = 'Color Blocks';			}			catch(e){				var blockLayer = layers.add();				blockLayer.name = 'Color Blocks';			}			layers.locked = true;			blockLayer.locked = false;					for(a=0;a<aB.length;a++){				var aBLeft = aB[a].artboardRect[0];				var aBRight = aB[a].artboardRect[2];				var aBTop = aB[a].artboardRect[1];				var aBBottom = aB[a].artboardRect[3];				var posH = (aBRight + aBLeft)/2;				var posW = (aBBottom + aBTop)/2;								aB.setActiveArtboardIndex(a);												for(b=0;b<docInks.length;b++){					var newBlock = docRef.pathItems.rectangle(posW + 2.5, posH - 2.5,5,5);					try{						newBlock.fillColor=swatches.getByName(docInks[b]).color;					}catch(e){						valid = false;						break;					}					try{						newBlock.stroked = false;					}					catch(e){						alert("Couldn't set stroke")					}				}				if(!valid)				{					break;				}							}			return valid;		}				function colorBlocksToBack(){			try{				var blockLayer = layers.getByName('Color Blocks');				blockLayer.zOrder(ZOrderMethod.SENDTOBACK);				blockLayer.locked = true;				layers.locked = false;			}			catch(e){				alert("Couldn't rearrange layers");			}		}		function existSewLine(){			inkList = docRef.inkList;			var existSew = false;			for(var s=0;s<inkList.length;s++){				if(inkList[a].name.toLowerCase() == 'sew line'){					existSew = true;				}			}			return existSew;		}				///////////////////////////		////End Logic Container////		///////////////////////////			removeExistingBlockLayer();		exterminateDefaultColors();		fixFloSwatches();		if(existSewLine){			removeSewLines();			if(retry == true){				removeSewLines();			}		}		alertProcessColors();		generateDocInks();		generateWrongColorList();		navyGrayCheck();		if(valid){			if(!loopArtBoards())			{				layers["Color Blocks"].remove();				alert("MRAP error. Please restart Illustrator and try again.");				return;			}			else			{				colorBlocksToBack();			}		}		}//if document exists}//end container functionscriptContainer();